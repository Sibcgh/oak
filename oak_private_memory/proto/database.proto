//
// Copyright 2025 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Private memory service definition: A memory consists of a datablob content
// and one or more tags. The service allows users to add a tagged memory and get
// the memories by tags.

syntax = "proto3";

package oak.private_memory;

// A simple key value pair.
message DataBlob {
  string id = 1;
  bytes blob = 2;
}

message WriteUnencryptedDataBlobRequest {
  DataBlob data_blob = 1;
}

message WriteDataBlobRequest {
  DataBlob data_blob = 1;
}

message WriteDataBlobResponse {}

message WriteUnencryptedDataBlobResponse {}

message ReadDataBlobRequest {
  string id = 1;
  // Whether to perform a strong read to ensure the latest data is returned.
  bool strong_read = 2;
}

message ReadUnencryptedDataBlobRequest {
  string id = 1;
  // Whether to perform a strong read to ensure the latest data is returned.
  bool strong_read = 2;
}

message ReadDataBlobResponse {
  DataBlob data_blob = 1;
}

message ReadUnencryptedDataBlobResponse {
  DataBlob data_blob = 1;
}

// A metadata blob containing a version.
message MetadataBlob {
  // The data blob containing the metadata info.
  DataBlob data_blob = 1;

  // An opaque version string representing the version of this metadata blob.
  // The string should not be parsed or interpreted by the client. It should
  // only be saved to pass back verbatim to calls to WriteMetadataBlob.
  string version = 2;
}

message ReadMetadataBlobRequest {
  string id = 1;
}

message ReadMetadataBlobResponse {
  MetadataBlob metadata_blob = 1;
}

message WriteMetadataBlobRequest {
  MetadataBlob metadata_blob = 1;
}

message WriteMetadataBlobResponse {}

message ResetDatabaseRequest {}

message ResetDatabaseResponse {}

message DeleteBlobsRequest {
  repeated string ids = 1;
}

message DeleteBlobsResponse {}

// The untrusted database service that the trusted application can connect to.
service SealedMemoryDatabaseService {
  // Writes a data blob to the database.
  rpc WriteDataBlob(WriteDataBlobRequest) returns (WriteDataBlobResponse) {}
  // Reads a data blob from the database.
  rpc ReadDataBlob(ReadDataBlobRequest) returns (ReadDataBlobResponse) {}

  // Write a metadata blob to the database.
  // If the current version of the stored metadata blob does not match the
  // version provided in the request, the write will fail.
  rpc WriteMetadataBlob(WriteMetadataBlobRequest)
      returns (WriteMetadataBlobResponse) {}

  // Read a metadatablob from the database.
  //
  // The returned metadatablob will include a version string; this version
  // string should be provided verbatim in the call to WriteMetadataBlob if
  // changes are to be committed.
  rpc ReadMetadataBlob(ReadMetadataBlobRequest)
      returns (ReadMetadataBlobResponse) {}

  // Writes an unencrypted data blob to the database.
  rpc WriteUnencryptedDataBlob(WriteUnencryptedDataBlobRequest)
      returns (WriteUnencryptedDataBlobResponse) {}
  // Reads an unencrypted data blob from the database.
  rpc ReadUnencryptedDataBlob(ReadUnencryptedDataBlobRequest)
      returns (ReadUnencryptedDataBlobResponse) {}

  // Resets the database. This is mainly used for testing.
  rpc ResetDatabase(ResetDatabaseRequest) returns (ResetDatabaseResponse) {}

  // Deletes multiple blobs from the database.
  rpc DeleteBlobs(DeleteBlobsRequest) returns (DeleteBlobsResponse) {}
}
