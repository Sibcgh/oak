//
// Copyright 2025 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package oak.verity;

import "proto/digest.proto";
import "proto/micro_rpc/options.proto";

option go_package = "proto/oak/verity";
option java_multiple_files = true;
option java_package = "com.google.oak.verity";

// Request message containing the input data and Wasm module to execute
message ExecuteRequest {
  // Binary data to operate on
  bytes input_data = 1;

  // Wasm module bytecode to execute
  bytes wasm_module = 2;
}

// Manifest containing digests of all inputs and outputs for verification
// TODO: b/448322106 - Consider using in-toto or SLSA instead of this protobuf.
message ExecutionManifest {
  // Digest of the input data
  oak.RawDigest input_data_digest = 1;

  // Digest of the Wasm module
  oak.RawDigest wasm_module_digest = 2;

  // Digest of the output data
  oak.RawDigest output_data_digest = 3;
}

// Response message containing both the execution manifest and raw output
message ExecuteResponse {
  // Manifest with digests for verification
  // TODO: b/448322106 - Change this to serialized bytes + signature (probably a
  // map of Oak Assertions).
  ExecutionManifest manifest = 1;

  // Raw output bytes from Wasm execution
  bytes output_data = 2;
}
